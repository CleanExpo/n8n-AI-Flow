'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { AIWorkflowChat } from '@/components/ai/AIWorkflowChat';
import { WorkflowCanvas } from '@/components/workflow/WorkflowCanvas';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Bot,
  Workflow,
  Save,
  Play,
  Upload,
  ArrowLeft,
  Sparkles,
  Eye,
  EyeOff
} from 'lucide-react';
import { useWorkflowStore } from '@/lib/stores/workflow-store';
import { useToast } from '@/hooks/use-toast';

export default function AIWorkflowPage() {
  const router = useRouter();
  const { toast } = useToast();
  const [generatedWorkflow, setGeneratedWorkflow] = useState<any>(null);
  const [showPreview, setShowPreview] = useState(true);
  const [activeTab, setActiveTab] = useState('chat');
  
  const {
    nodes,
    edges,
    addNode,
    updateNode,
    deleteNode,
    addEdge,
    updateEdge,
    deleteEdge,
    reset,
    saveWorkflow
  } = useWorkflowStore();

  const handleWorkflowGenerated = (workflow: any) => {
    setGeneratedWorkflow(workflow);
    
    // Clear existing workflow
    reset();
    
    // Add generated nodes to the canvas
    if (workflow.nodes) {
      workflow.nodes.forEach((node: any) => {
        addNode({
          id: node.id,
          type: 'custom',
          position: node.position || { x: Math.random() * 500, y: Math.random() * 300 },
          data: {
            label: node.type.split('.').pop(),
            type: node.type,
            parameters: node.parameters || {},
            icon: getNodeIcon(node.type)
          }
        });
      });
    }
    
    // Add connections
    if (workflow.connections) {
      workflow.connections.forEach((connection: any, index: number) => {
        addEdge({
          id: `edge-${index}`,
          source: connection.source,
          target: connection.target,
          sourceHandle: connection.sourceHandle || 'output',
          targetHandle: connection.targetHandle || 'input',
          type: 'smoothstep',
          animated: true
        });
      });
    }
    
    // Switch to canvas view
    setActiveTab('canvas');
    setShowPreview(true);
    
    toast({
      title: 'Workflow Generated!',
      description: `Created ${workflow.nodes?.length || 0} nodes with ${workflow.connections?.length || 0} connections`
    });
  };

  const handlePreviewWorkflow = (workflow: any) => {
    handleWorkflowGenerated(workflow);
  };

  const handleSaveWorkflow = async () => {
    if (!generatedWorkflow) {
      toast({
        title: 'No workflow to save',
        description: 'Generate a workflow first',
        variant: 'destructive'
      });
      return;
    }

    try {
      const response = await fetch('/api/workflows', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: generatedWorkflow.name || 'AI Generated Workflow',
          description: 'Generated by AI Assistant',
          nodes: nodes,
          edges: edges,
          config: generatedWorkflow
        })
      });

      if (response.ok) {
        const data = await response.json();
        toast({
          title: 'Workflow Saved!',
          description: 'Your workflow has been saved successfully'
        });
        router.push(`/workflows/${data.id}`);
      }
    } catch (error) {
      toast({
        title: 'Save Failed',
        description: 'Failed to save workflow',
        variant: 'destructive'
      });
    }
  };

  const handleDeployToN8n = async () => {
    if (!generatedWorkflow) {
      toast({
        title: 'No workflow to deploy',
        description: 'Generate a workflow first',
        variant: 'destructive'
      });
      return;
    }

    try {
      // First save the workflow
      const saveResponse = await fetch('/api/workflows', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: generatedWorkflow.name || 'AI Generated Workflow',
          description: 'Generated by AI Assistant',
          nodes: nodes,
          edges: edges,
          config: generatedWorkflow
        })
      });

      if (!saveResponse.ok) throw new Error('Failed to save workflow');
      
      const savedWorkflow = await saveResponse.json();

      // Then sync to n8n
      const syncResponse = await fetch(`/api/workflows/${savedWorkflow.id}/sync`, {
        method: 'POST'
      });

      if (syncResponse.ok) {
        toast({
          title: 'Deployed to n8n!',
          description: 'Your workflow is now active in n8n'
        });
        router.push(`/workflows/${savedWorkflow.id}`);
      }
    } catch (error) {
      toast({
        title: 'Deployment Failed',
        description: 'Failed to deploy workflow to n8n',
        variant: 'destructive'
      });
    }
  };

  const getNodeIcon = (nodeType: string): string => {
    const type = nodeType.toLowerCase();
    if (type.includes('gmail')) return 'üìß';
    if (type.includes('slack')) return 'üí¨';
    if (type.includes('sheet')) return 'üìä';
    if (type.includes('webhook')) return 'üîó';
    if (type.includes('http')) return 'üåê';
    if (type.includes('database') || type.includes('sql')) return 'üóÑÔ∏è';
    if (type.includes('image')) return 'üñºÔ∏è';
    if (type.includes('file')) return 'üìÅ';
    return '‚ö°';
  };

  return (
    <div className="flex flex-col h-screen bg-background">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b">
        <div className="flex items-center space-x-4">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => router.push('/dashboard')}
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Button>
          <div className="flex items-center space-x-2">
            <Bot className="h-5 w-5 text-primary" />
            <h1 className="text-xl font-semibold">AI Workflow Generator</h1>
            <Sparkles className="h-4 w-4 text-yellow-500" />
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          {generatedWorkflow && (
            <>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowPreview(!showPreview)}
              >
                {showPreview ? (
                  <>
                    <EyeOff className="h-4 w-4 mr-2" />
                    Hide Preview
                  </>
                ) : (
                  <>
                    <Eye className="h-4 w-4 mr-2" />
                    Show Preview
                  </>
                )}
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={handleSaveWorkflow}
              >
                <Save className="h-4 w-4 mr-2" />
                Save
              </Button>
              <Button
                size="sm"
                onClick={handleDeployToN8n}
              >
                <Upload className="h-4 w-4 mr-2" />
                Deploy to n8n
              </Button>
            </>
          )}
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 overflow-hidden">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full">
          <TabsList className="w-full justify-start rounded-none border-b">
            <TabsTrigger value="chat">
              <Bot className="h-4 w-4 mr-2" />
              AI Assistant
            </TabsTrigger>
            <TabsTrigger value="canvas" disabled={!generatedWorkflow}>
              <Workflow className="h-4 w-4 mr-2" />
              Workflow Canvas
            </TabsTrigger>
          </TabsList>

          <TabsContent value="chat" className="h-full p-4">
            <div className="h-full max-w-5xl mx-auto">
              <AIWorkflowChat
                onWorkflowGenerated={handleWorkflowGenerated}
                onPreviewWorkflow={handlePreviewWorkflow}
                className="h-full"
              />
            </div>
          </TabsContent>

          <TabsContent value="canvas" className="h-full p-0">
            {showPreview && generatedWorkflow ? (
              <div className="h-full relative">
                <WorkflowCanvas />
                <div className="absolute top-4 left-4 bg-background/95 backdrop-blur p-3 rounded-lg border shadow-lg">
                  <div className="flex items-center space-x-2 mb-2">
                    <Sparkles className="h-4 w-4 text-yellow-500" />
                    <span className="text-sm font-medium">AI Generated Workflow</span>
                  </div>
                  <div className="text-xs text-muted-foreground space-y-1">
                    <div>{nodes.length} nodes ‚Ä¢ {edges.length} connections</div>
                    <div>Ready to deploy</div>
                  </div>
                </div>
              </div>
            ) : (
              <div className="h-full flex items-center justify-center text-muted-foreground">
                <div className="text-center">
                  <Bot className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>Generate a workflow using the AI Assistant first</p>
                </div>
              </div>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}